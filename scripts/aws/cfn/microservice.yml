AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic
  
  VpcId:
    Type: String
    Description: VpcId of the VPC where to install PN-CORE
  VpcCidr:
    Type: String
    Description: Cidr of the VPC where to install PN-CORE
  VpcSubnets:
    Type: String
    Description: subnets where to install PN-CORE
  VpcSubnetsRoutingTables:
    Type: String
    Description: routing table for subnets where to install PN-CORE
  PrivateHostedZone:
    Type: String
    Description: private hosted zone where register the application load balancer
  
  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'

  ConfidentialObjectsDynamoTableName:
    Type: String
    Description: 'Name of dynamodb table containing fake confidentials informations'

  ConfidentialObjectsDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing fake confidentials informations'

  PDVTokenizerBasePath:
    Type: String
    Description: 'Path base di invocazione al servizio di tokenizer'

  PDVUserRegistryBasePath:
    Type: String
    Description: 'Path base di invocazione al servizio di user registry'
  
  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  CacheExpireMinutes:
    Type: String
    Description: 'Cache expire in minuti'

  CacheMaxSize:
    Type: String
    Description: 'Cache dimensione massima'

Resources:

  # Private connection from subnets to AWS services
  VPCEndpoints:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/vpc-endpoints.yaml"
      Parameters:
        VpcName: !Ref ProjectName
        VpcCidr: !Ref VpcCidr
        Subnets: !Ref VpcSubnets
        RouteTableIds: !Ref VpcSubnetsRoutingTables
        VpcId: !Ref VpcId

  ###                       APPLICATION LOAD BALANCER                       ###
  #############################################################################
  # Application load balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internal
      IpAddressType: ipv4
      Subnets: !Split [ ',', !Ref VpcSubnets ]
      SecurityGroups:
        - !Ref WebappSecurityGroup

  # Application load balancer listener
  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 8080
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            ContentType: "application/json"
            MessageBody: "{ \"error\": \"404\", \"message\": \"Load balancer rule not configured\" }"
          Order: 1

  # Application security groups
  WebappSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-webapp-security-group
      GroupDescription: "ingres tcp 8080, egress all"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VpcId


  # Load balancer private fixed DNS
  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub 'alb.confidential.${ProjectName}.internal'
      Type: A
      HostedZoneId: !Ref PrivateHostedZone  
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID

  ###                             ECS CLUSTER                             ###
  ###########################################################################

  # The cluster
  ECSCluster:
    DependsOn: ApplicationLoadBalancerListener
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-cluster.yaml"
      Parameters:
        MacroServiceName: !Sub '${ProjectName}-confidential'
  
  # PN-Delivery microservice
  DataVaultMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-data-vault-sep'
        CpuValue: 1024
        MemoryAmount: 2GB
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'PN_DATA_VAULT_DYNAMODB_TABLE_NAME=${ConfidentialObjectsDynamoTableName}'
        ContainerEnvEntry3: !Sub 'PN_DATA_VAULT_CLIENT_TOKENIZER_BASEPATH=${PDVTokenizerBasePath}'
        ContainerEnvEntry4: !Sub 'PN_DATA_VAULT_CLIENT_USERREGISTRY_BASEPATH=${PDVUserRegistryBasePath}'
        ContainerEnvEntry5: !Sub 'PN_DATA_VAULT_TOKENIZER_API_KEY_PF={{resolve:secretsmanager:${ProjectName}-PersonalDataVault-Apikey:SecretString:TokenizerApiKeyForPF}}'
        ContainerEnvEntry6: !Sub 'PN_DATA_VAULT_TOKENIZER_API_KEY_PG={{resolve:secretsmanager:${ProjectName}-PersonalDataVault-Apikey:SecretString:TokenizerApiKeyForPG}}'
        ContainerEnvEntry7: !Sub 'PN_DATA_VAULT_USERREGISTRY_API_KEY_PF={{resolve:secretsmanager:${ProjectName}-PersonalDataVault-Apikey:SecretString:UserRegistryApiKeyForPF}}'
        ContainerEnvEntry8: !Sub 'PN_DATA_VAULT_USERREGISTRY_API_KEY_PG={{resolve:secretsmanager:${ProjectName}-PersonalDataVault-Apikey:SecretString:UserRegistryApiKeyForPG}}'
        ContainerEnvEntry9: !Sub 'PN_DATA_VAULT_CACHE_EXPIRE_AFTER_MINUTES=${CacheExpireMinutes}'
        ContainerEnvEntry10: !Sub 'PN_DATA_VAULT_CACHE_MAX_SIZE=${CacheMaxSize}'
        MappedPaths: '/datavault/*,/datavault-private/*'
        ECSClusterName: !GetAtt ECSCluster.Outputs.ClusterName
        Subnets: !Ref VpcSubnets
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        LoadBalancerListenerArn: !GetAtt ApplicationLoadBalancerListener.ListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber

  # Grant operational rights to PN-Delivery microservice
  DeliveryMicroserviceTaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-datavault-sep-CustomTaskPolicy'
      Roles:
        - !GetAtt DataVaultMicroservice.Outputs.TaskRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource:
              - !Ref ConfidentialObjectsDynamoTableArn

