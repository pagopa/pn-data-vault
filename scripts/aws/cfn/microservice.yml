AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  # ApiDnsName:
  #   Type: String
  #   Description: 'The DNS name used for B2B rest API.'

  # WebApiDnsName:
  #   Type: String
  #   Description: 'The DNS name used for WEB rest API.'
  
  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  # ApplicationLoadBalancerDomain:
  #   Type: String
  #   Description: 'Base URL of the load balancer where the service is going to be reachable'

  # NetworkLoadBalancerLink:
  #   Type: String
  #   Description: 'network load balancer link for API-GW'

  ConfidentialObjectsDynamoTableName:
    Type: String
    Description: 'Name of dynamodb table containing fake confidentials informations'

  ConfidentialObjectsDynamoTableArn:
    Type: String
    Description: 'ARN of dynamodb table containing fake confidentials informations'

  PDVTokenizerBasePath:
    Type: String
    Description: 'Path base di invocazione al servizio di tokenizer'

  PDVUserRegistryBasePath:
    Type: String
    Description: 'Path base di invocazione al servizio di user registry'

Resources:

  # PN-Delivery microservice
  DataVaultMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/ecs-service.yaml"
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-data-vault'
        CpuValue: 1024
        MemoryAmount: 2GB
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'PN_DATAVAULT_DYNAMODB_TABLENAME=${ConfidentialObjectsDynamoTableName}'
        ContainerEnvEntry3: !Sub 'PN_DATAVAULT_CLIENT_TOKENIZER_BASEPATH=${PDVTokenizerBasePath}'
        ContainerEnvEntry4: !Sub 'PN_DATAVAULT_CLIENT_USERREGISTRY_BASEPATH=${PDVUserRegistryBasePath}'
        ContainerEnvEntry5: !Sub 'PN_DATAVAULT_TOKENIZER_API_KEY_PF={{resolve:ssm-secure:PDVTokenizerApiKeyForPF}}'
        ContainerEnvEntry6: !Sub 'PN_DATAVAULT_TOKENIZER_API_KEY_PG={{resolve:ssm-secure:PDVTokenizerApiKeyForPG}}'
        ContainerEnvEntry7: !Sub 'PN_DATAVAULT_USERREGISTRY_API_KEY_PF={{resolve:ssm-secure:PDVUserRegistryApiKeyForPF}}'
        ContainerEnvEntry8: !Sub 'PN_DATAVAULT_USERREGISTRY_API_KEY_PG={{resolve:ssm-secure:PDVUserRegistryApiKeyForPG}}'
        MappedPaths: '/datavault/*,/datavault-private/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref SubnetsIds
        VpcId: !Ref VpcId
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber

  # Grant operational rights to PN-Delivery microservice
  DeliveryMicroserviceTaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-datavault-CustomTaskPolicy'
      Roles:
        - !GetAtt DataVaultMicroservice.Outputs.TaskRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ExecuteTransaction
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:TransactGetItems
              - dynamodb:TransactWriteItems
              - dynamodb:UpdateItem
            Resource:
              - !Ref ConfidentialObjectsDynamoTableArn


#  # Expose PN-Delivery microservice public API with API-GW for B2B usage
#  DatavaultMicroservicePublicAPI:
#    Type: AWS::CloudFormation::Stack
#    Properties:
#      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
#      Parameters:
#        MicroServiceUniqueName: !Sub '${ProjectName}-datavault'
#        IntendedUsage: B2B
#        DnsName: !Ref ApiDnsName
#        ProjectName: !Ref ProjectName
#        ServiceApiPath: 'datavault'
#        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
#        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain
#
#  # Expose PN-Delivery microservice public API with API-GW for WEB usage
#  DeliveryMicroservicePublicWebAPI:
#    Type: AWS::CloudFormation::Stack
#    Properties:
#      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/api-gw-expose-service.yaml"
#      Parameters:
#        MicroServiceUniqueName: !Sub '${ProjectName}-datavault'
#        IntendedUsage: WEB
#        DnsName: !Ref WebApiDnsName
#        ProjectName: !Ref ProjectName
#        ServiceApiPath: 'datavault'
#        NetworkLoadBalancerLink: !Ref NetworkLoadBalancerLink
#        ApplicationLoadBalancerDomain: !Ref ApplicationLoadBalancerDomain
